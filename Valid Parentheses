/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Input: s = "()"
Output: true

Input: s = "()[]{}"
Output: true

Input: s = "(]"
Output: false
*/

bool isValid(string s) {
        stack<char> item ;
        for(char ch : s ){
            if(ch=='(' || ch=='{' || ch=='['){
                item.push(ch);
            }else{
                if(!item.empty() && ( ch==')'&&item.top()=='('  || ch=='}'&&item.top()=='{' || ch==']'&&item.top()=='[' )) {
                    item.pop();
                }else{
                    return false;
                }
            }
        }
         return item.empty();
    }












this logic not crrect at this time [(]) output false but given code output answer is true
 bool isValid(string s) {
        int a=0 , b=0 , c=0;
        for(char ch : s ){
            switch(ch){
               case '(' :{  a++; 
                            break;}
               case ')' :{  a--; 
                            break;}

               case '{' :{  b++; 
                            break;}
               case '}' :{  b--; 
                            break;}

               case '[' :{  c++; 
                            break;}
               case ']' :{  c--; 
                            break;}
            }
        }
            if(a==0 && b==0 && c==0)
            {
                return true;
            }else{
                return false;
            }
        }
}
