/*
You are given two positive integers low and high.
An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x.
Numbers with an odd number of digits are never symmetric.
Return the number of symmetric integers in the range [low, high].

Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.

Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.

execsion time is 30 ms
*/

int countSymmetricIntegers(int low, int high) {
        int count =0;
        for(int i= low ; i<= high ; i++){
            int ct=0;
            for(int j=i; j!=0 ; j/=10){
                ct++;
            }
            if(ct%2==0){
                int c = pow(10,ct/2);
                int first = i/c;
                int last =  i%c;
                if(sumOfDigit(first)==sumOfDigit(last)){
                    count++;
                }
            }
        }
        return count;
    }

    int sumOfDigit(int num){
        int sum =0;
        while(num!=0){
            sum+= num%10;
            num/=10;
        }
        return sum;
    }
